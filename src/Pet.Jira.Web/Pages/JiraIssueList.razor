@page "/issues"

@using MediatR;
@using Pet.Jira.Web.CQRS;
@using Pet.Jira.Adapter;
@using System.ComponentModel.DataAnnotations;
@inject IMediator _mediator;
@inject ISnackbar _snackbar;

<MudGrid Spacing="2" Justify="Justify.Center">
    <MudItem xs="3" >
        <EditForm Model="@issueQuery" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Filter</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudDateRangePicker Label="Date range" @bind-DateRange="issueQuery.DateRange"/>
                            <MudTextField Label="Count" @bind-Value="issueQuery.Count" For="@(() => issueQuery.Count)" InputType="InputType.Number"/>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Tertiary" Class="ml-auto" EndIcon="@Icons.Material.Filled.Send">Search</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudItem>

    <MudItem xs="9">
        @if (pageModel.InProgress)
        {
            <MudOverlay Visible="@pageModel.InProgress" DarkBackground="true" Absolute="true">
                <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
            </MudOverlay>
        }
        else if (pageModel.State == ListState.Success)
        {
            <MudSimpleTable Dense=true Hover=true Style="overflow-x: auto;">
                <thead>
                    <tr>
                        <th style="min-width:40px">From</th>
                        <th style="min-width:40px">To</th>
                        <th>Issue</th>
                        <th>Diff</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in pageModel.DayUserWorklogs)
                    {
                        <tr>
                            <td colspan="5">
                                @item.Date.ToShortDateString() (@item.Date.DayOfWeek) - @item.CalculatedWorklogsSum (logged: @item.ActualWorklogsSum.ToString(@"hh\:mm\:ss"))
                            </td>
                        </tr>
                        @foreach (var entity in item.EstimatedWorklogs)
                        {
                            <tr>
                                <td>@entity.StartDate.ToString("HH:mm")</td>
                                <td>@entity.EndDate.ToString("HH:mm")</td>
                                <td><MudLink Href="@entity.Issue.Link" Typo="Typo.body2">@entity.Issue.Key</MudLink> @entity.Issue.Summary</td>
                                <td><MudTextField @bind-Value="@entity.RestTimeSpent" Variant="Variant.Text" IconSize="Size.Small"></MudTextField></td>
                                <td>
                                    <MudFab Size="Size.Small" Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(() => AddWorklog(entity))"></MudFab>
                                </td>
                            </tr>
                        }
                        @foreach (var entity in item.ActualWorklogs)
                        {
                            <tr>
                                <td>@entity.StartDate.ToString("HH:mm")</td>
                                <td></td>
                                <td><MudLink Href="@entity.Issue.Link" Typo="Typo.body2">@entity.Issue.Key</MudLink> @entity.Issue.Summary</td>
                                <td>@entity.TimeSpent</td>
                                <td><MudAvatar Color="Color.Tertiary">A</MudAvatar></td>
                            </tr>
                        }
                    }
                </tbody>
            </MudSimpleTable>
        }
    </MudItem>
</MudGrid>

@functions {
    IssueQuery issueQuery = new IssueQuery();
    CQRS.Queries.Issue.List.Model model;
    PageModel pageModel = new PageModel();

    protected override async Task OnInitializedAsync()
    {
    }

    private async Task AddWorklog(EstimatedWorklog entity)
    {
        await _mediator.Send(new CQRS.Commands.Worklog.Insert.Command(new CQRS.Commands.Worklog.Insert.Model
        {
            At = entity.EndDate,
            IssueKey = entity.Issue.Key,
            TimeSpent = entity.RestTimeSpent
        }));
        _snackbar.Add(
            $"Worklog {entity.Issue.Key} added successfully!",
            Severity.Normal,
            config => { config.ActionColor = Color.Info; });
    }

    private class PageModel
    {
        public IEnumerable<DayUserWorklog> DayUserWorklogs { get; set; }
        public ListState State { get; set; }
        public bool InProgress => State == ListState.IsProgress;
    }

    private enum ListState
    {
        Unknown,
        IsProgress,
        Success
    }

    public class IssueQuery
    {
        [Required]
        public DateRange? DateRange { get; set; } = new DateRange(DateTime.Now.AddDays(-7).Date, DateTime.Now.Date);

        [Required]
        public DateTime? StartDate => DateRange.Start;

        [Required]
        public DateTime? EndDate => DateRange.End;

        [Required]
        [Range(1, 300)]
        public int? Count { get; set; } = 20;
    }

    private async Task OnValidSubmit(EditContext context)
    {
        pageModel.State = ListState.IsProgress;
        model = await _mediator.Send(new CQRS.Queries.Issue.List.Query()
        {
            StartDate = issueQuery.StartDate.Value,
            EndDate = issueQuery.EndDate.Value,
            Count = issueQuery.Count.Value
        });
        pageModel.DayUserWorklogs = model.Worklogs;
        pageModel.State = ListState.Success;
        StateHasChanged();
    }
}
